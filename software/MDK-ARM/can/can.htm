<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [can\can.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image can\can.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Dec 04 18:26:00 2019
<BR><P>
<H3>Maximum Stack Usage =        284 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; CO_init &rArr; CO_TPDO_init &rArr; CO_TPDOconfigMap &rArr; CO_PDOfindMap &rArr; CO_OD_find
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[12]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[34]">CANrx_lockCbSync</a> from main.o(i.CANrx_lockCbSync) referenced from main.o(i.main)
 <LI><a href="#[1f]">CEC_CAN_IRQHandler</a> from stm32f0xx_it.o(i.CEC_CAN_IRQHandler) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[26]">CO_HBcons_receive</a> from co_hbconsumer.o(i.CO_HBcons_receive) referenced from co_hbconsumer.o(i.CO_HBcons_monitoredNodeConfig)
 <LI><a href="#[28]">CO_NMT_receive</a> from co_nmt_heartbeat.o(i.CO_NMT_receive) referenced from co_nmt_heartbeat.o(i.CO_NMT_init)
 <LI><a href="#[24]">CO_ODF_1003</a> from co_emergency.o(i.CO_ODF_1003) referenced from co_emergency.o(i.CO_EM_init)
 <LI><a href="#[2f]">CO_ODF_1005</a> from co_sync.o(i.CO_ODF_1005) referenced from co_sync.o(i.CO_SYNC_init)
 <LI><a href="#[30]">CO_ODF_1006</a> from co_sync.o(i.CO_ODF_1006) referenced from co_sync.o(i.CO_SYNC_init)
 <LI><a href="#[25]">CO_ODF_1014</a> from co_emergency.o(i.CO_ODF_1014) referenced from co_emergency.o(i.CO_EM_init)
 <LI><a href="#[27]">CO_ODF_1016</a> from co_hbconsumer.o(i.CO_ODF_1016) referenced from co_hbconsumer.o(i.CO_HBconsumer_init)
 <LI><a href="#[31]">CO_ODF_1019</a> from co_sync.o(i.CO_ODF_1019) referenced from co_sync.o(i.CO_SYNC_init)
 <LI><a href="#[2d]">CO_ODF_1200</a> from co_sdo.o(i.CO_ODF_1200) referenced from co_sdo.o(i.CO_SDO_init)
 <LI><a href="#[2a]">CO_ODF_RPDOcom</a> from co_pdo.o(i.CO_ODF_RPDOcom) referenced from co_pdo.o(i.CO_RPDO_init)
 <LI><a href="#[2b]">CO_ODF_RPDOmap</a> from co_pdo.o(i.CO_ODF_RPDOmap) referenced from co_pdo.o(i.CO_RPDO_init)
 <LI><a href="#[32]">CO_ODF_TPDOcom</a> from co_pdo.o(i.CO_ODF_TPDOcom) referenced from co_pdo.o(i.CO_TPDO_init)
 <LI><a href="#[33]">CO_ODF_TPDOmap</a> from co_pdo.o(i.CO_ODF_TPDOmap) referenced from co_pdo.o(i.CO_TPDO_init)
 <LI><a href="#[2c]">CO_PDO_receive</a> from co_pdo.o(i.CO_PDO_receive) referenced from co_pdo.o(i.CO_RPDOconfigCom)
 <LI><a href="#[2e]">CO_SDO_receive</a> from co_sdo.o(i.CO_SDO_receive) referenced from co_sdo.o(i.CO_SDO_init)
 <LI><a href="#[29]">CO_SYNC_receive</a> from co_sync.o(i.CO_SYNC_receive) referenced from co_sync.o(i.CO_ODF_1005)
 <LI><a href="#[29]">CO_SYNC_receive</a> from co_sync.o(i.CO_SYNC_receive) referenced from co_sync.o(i.CO_SYNC_init)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from stm32f0xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[7]">PVD_VDDIO2_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[1b]">SPI1_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[1c]">SPI2_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f042x6.o(.text)
 <LI><a href="#[17]">TIM14_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[18]">TIM16_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[19]">TIM17_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[13]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[14]">TIM1_CC_IRQHandler</a> from stm32f0xx_it.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[e]">TSC_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[1d]">USART1_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[1e]">USART2_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[20]">USB_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f042x6.o(.text) referenced from startup_stm32f042x6.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f042x6.o(.text)
 <LI><a href="#[21]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[35]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ba]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[bb]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[bc]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_process
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_init
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[36]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>ADC_Enable</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, stm32f042_hal_exclude.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_Enable &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start_DMA
</UL>

<P><STRONG><a name="[3f]"></a>ADC_Start_DMA</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32f042_hal_exclude.o(i.ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>CAN_Receive</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, stm32f042_hal_exclude.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinterrupt
</UL>

<P><STRONG><a name="[42]"></a>CAN_Receive_IT</STRONG> (Thumb, 472 bytes, Stack size 8 bytes, stm32f042_hal_exclude.o(i.CAN_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_CAN_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>CAN_Transmit</STRONG> (Thumb, 314 bytes, Stack size 12 bytes, stm32f042_hal_exclude.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsendToModule
</UL>

<P><STRONG><a name="[34]"></a>CANrx_lockCbSync</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.CANrx_lockCbSync))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1f]"></a>CEC_CAN_IRQHandler</STRONG> (Thumb, 704 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.CEC_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CEC_CAN_IRQHandler &rArr; CO_CANinterrupt &rArr; CO_CANsendToModule &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinterrupt
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive_IT
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CO_CANclearPendingSyncPDOs</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, co_driver.o(i.CO_CANclearPendingSyncPDOs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CO_CANclearPendingSyncPDOs &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_errorReport
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_SYNC_RPDO
</UL>

<P><STRONG><a name="[41]"></a>CO_CANinterrupt</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, co_driver.o(i.CO_CANinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CO_CANinterrupt &rArr; CO_CANsendToModule &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsendToModule
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_CAN_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>CO_CANmodule_disable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, co_driver.o(i.CO_CANmodule_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CO_CANmodule_disable &rArr; HAL_CAN_DeInit &rArr; HAL_CAN_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_delete
</UL>

<P><STRONG><a name="[4b]"></a>CO_CANmodule_init</STRONG> (Thumb, 470 bytes, Stack size 80 bytes, co_driver.o(i.CO_CANmodule_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CO_CANmodule_init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_DeInit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_init
</UL>

<P><STRONG><a name="[59]"></a>CO_CANrxBufferInit</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, co_driver.o(i.CO_CANrxBufferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_1005
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDOconfigCom
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBcons_monitoredNodeConfig
</UL>

<P><STRONG><a name="[4f]"></a>CO_CANsend</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, co_driver.o(i.CO_CANsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CO_CANsend &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_errorReport
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsendToModule
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_process
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_process
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_abort
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOsend
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_process
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_process
</UL>

<P><STRONG><a name="[7d]"></a>CO_CANsetConfigurationMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, co_driver.o(i.CO_CANsetConfigurationMode))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_delete
</UL>

<P><STRONG><a name="[b6]"></a>CO_CANsetNormalMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, co_driver.o(i.CO_CANsetNormalMode))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>CO_CANtxBufferInit</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, co_driver.o(i.CO_CANtxBufferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CO_CANtxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_1019
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_1005
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOconfigCom
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
</UL>

<P><STRONG><a name="[51]"></a>CO_CANverifyErrors</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, co_driver.o(i.CO_CANverifyErrors))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CO_CANverifyErrors &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_errorReset
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_errorReport
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_process
</UL>

<P><STRONG><a name="[53]"></a>CO_EM_init</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, co_emergency.o(i.CO_EM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CO_EM_init &rArr; CO_OD_configure &rArr; CO_OD_find
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_configure
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_init
</UL>

<P><STRONG><a name="[56]"></a>CO_EM_process</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, co_emergency.o(i.CO_EM_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CO_EM_process &rArr; CO_CANverifyErrors &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_memcpy
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_errorReport
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANverifyErrors
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[5a]"></a>CO_HBconsumer_init</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, co_hbconsumer.o(i.CO_HBconsumer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CO_HBconsumer_init &rArr; CO_HBcons_monitoredNodeConfig &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_configure
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBcons_monitoredNodeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_init
</UL>

<P><STRONG><a name="[5b]"></a>CO_HBconsumer_process</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, co_hbconsumer.o(i.CO_HBconsumer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CO_HBconsumer_process &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_errorReport
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[80]"></a>CO_NMT_blinkingProcess50ms</STRONG> (Thumb, 274 bytes, Stack size 0 bytes, co_nmt_heartbeat.o(i.CO_NMT_blinkingProcess50ms))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[5c]"></a>CO_NMT_init</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, co_nmt_heartbeat.o(i.CO_NMT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CO_NMT_init &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_init
</UL>

<P><STRONG><a name="[5d]"></a>CO_NMT_process</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, co_nmt_heartbeat.o(i.CO_NMT_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CO_NMT_process &rArr; CO_CANsend &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_isError
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[54]"></a>CO_OD_configure</STRONG> (Thumb, 94 bytes, Stack size 36 bytes, co_sdo.o(i.CO_OD_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CO_OD_configure &rArr; CO_OD_find
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_find
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
</UL>

<P><STRONG><a name="[66]"></a>CO_OD_find</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, co_sdo.o(i.CO_OD_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CO_OD_find
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_configure
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_initTransfer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_PDOfindMap
</UL>

<P><STRONG><a name="[67]"></a>CO_OD_getAttribute</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, co_sdo.o(i.CO_OD_getAttribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CO_OD_getAttribute
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_initTransfer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_PDOfindMap
</UL>

<P><STRONG><a name="[69]"></a>CO_OD_getDataPointer</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, co_sdo.o(i.CO_OD_getDataPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_OD_getDataPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_initTransfer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_PDOfindMap
</UL>

<P><STRONG><a name="[6f]"></a>CO_OD_getFlagsPointer</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, co_sdo.o(i.CO_OD_getFlagsPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_OD_getFlagsPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_initTransfer
</UL>

<P><STRONG><a name="[68]"></a>CO_OD_getLength</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, co_sdo.o(i.CO_OD_getLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_OD_getLength
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_process
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_initTransfer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_PDOfindMap
</UL>

<P><STRONG><a name="[6a]"></a>CO_RPDO_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, co_pdo.o(i.CO_RPDO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CO_RPDO_init &rArr; CO_RPDOconfigMap &rArr; CO_PDOfindMap &rArr; CO_OD_find
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_configure
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDOconfigMap
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDOconfigCom
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_init
</UL>

<P><STRONG><a name="[82]"></a>CO_RPDO_process</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, co_pdo.o(i.CO_RPDO_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CO_RPDO_process
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_SYNC_RPDO
</UL>

<P><STRONG><a name="[6d]"></a>CO_SDO_init</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, co_sdo.o(i.CO_SDO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CO_SDO_init &rArr; CO_OD_configure &rArr; CO_OD_find
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_configure
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_init
</UL>

<P><STRONG><a name="[6e]"></a>CO_SDO_initTransfer</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, co_sdo.o(i.CO_SDO_initTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CO_SDO_initTransfer &rArr; CO_OD_find
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_getFlagsPointer
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_getLength
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_getDataPointer
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_getAttribute
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_find
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_process
</UL>

<P><STRONG><a name="[70]"></a>CO_SDO_process</STRONG> (Thumb, 2872 bytes, Stack size 64 bytes, co_sdo.o(i.CO_SDO_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CO_SDO_process &rArr; CO_SDO_abort &rArr; CO_CANsend &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_writeOD
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_readOD
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_initTransfer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_abort
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_getLength
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_memcpySwap4
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_memcpySwap2
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
</UL>

<P><STRONG><a name="[71]"></a>CO_SDO_readOD</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, co_sdo.o(i.CO_SDO_readOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CO_SDO_readOD
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_process
</UL>

<P><STRONG><a name="[72]"></a>CO_SDO_writeOD</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, co_sdo.o(i.CO_SDO_writeOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CO_SDO_writeOD
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_process
</UL>

<P><STRONG><a name="[75]"></a>CO_SYNC_init</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, co_sync.o(i.CO_SYNC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CO_SYNC_init &rArr; CO_OD_configure &rArr; CO_OD_find
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_configure
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_init
</UL>

<P><STRONG><a name="[b5]"></a>CO_SYNC_initCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, co_sync.o(i.CO_SYNC_initCallback))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>CO_SYNC_process</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, co_sync.o(i.CO_SYNC_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CO_SYNC_process &rArr; CO_CANsend &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_errorReport
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_SYNC_RPDO
</UL>

<P><STRONG><a name="[77]"></a>CO_TPDO_init</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, co_pdo.o(i.CO_TPDO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = CO_TPDO_init &rArr; CO_TPDOconfigMap &rArr; CO_PDOfindMap &rArr; CO_OD_find
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_configure
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOconfigMap
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOconfigCom
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_init
</UL>

<P><STRONG><a name="[78]"></a>CO_TPDO_process</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, co_pdo.o(i.CO_TPDO_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOsend
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_TPDO
</UL>

<P><STRONG><a name="[7a]"></a>CO_TPDOisCOS</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, co_pdo.o(i.CO_TPDOisCOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CO_TPDOisCOS &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_TPDO
</UL>

<P><STRONG><a name="[79]"></a>CO_TPDOsend</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, co_pdo.o(i.CO_TPDOsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CO_TPDOsend &rArr; CO_CANsend &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_process
</UL>

<P><STRONG><a name="[7c]"></a>CO_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, canopen.o(i.CO_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CO_delete &rArr; CO_CANmodule_disable &rArr; HAL_CAN_DeInit &rArr; HAL_CAN_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetConfigurationMode
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>CO_errorReport</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, co_emergency.o(i.CO_errorReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_memcpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_memcpySwap4
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_memcpySwap2
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANverifyErrors
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANclearPendingSyncPDOs
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_process
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOconfigMap
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDOconfigMap
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_process
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_process
</UL>

<P><STRONG><a name="[52]"></a>CO_errorReset</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, co_emergency.o(i.CO_errorReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CO_errorReset &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_memcpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_memcpySwap4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANverifyErrors
</UL>

<P><STRONG><a name="[5f]"></a>CO_getUint32</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, co_sdo.o(i.CO_getUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_getUint32
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_1006
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_1005
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_1200
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_1016
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_1014
</UL>

<P><STRONG><a name="[7e]"></a>CO_init</STRONG> (Thumb, 1104 bytes, Stack size 80 bytes, canopen.o(i.CO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = CO_init &rArr; CO_TPDO_init &rArr; CO_TPDOconfigMap &rArr; CO_PDOfindMap &rArr; CO_OD_find
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetConfigurationMode
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_delete
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>CO_isError</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, co_emergency.o(i.CO_isError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CO_isError
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_process
</UL>

<P><STRONG><a name="[57]"></a>CO_memcpy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, co_sdo.o(i.CO_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_errorReset
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_errorReport
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_process
</UL>

<P><STRONG><a name="[74]"></a>CO_memcpySwap2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, co_sdo.o(i.CO_memcpySwap2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_memcpySwap2
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_errorReport
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_process
</UL>

<P><STRONG><a name="[6c]"></a>CO_memcpySwap4</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, co_sdo.o(i.CO_memcpySwap4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_memcpySwap4
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_errorReset
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_errorReport
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_process
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_abort
</UL>

<P><STRONG><a name="[7f]"></a>CO_process</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, canopen.o(i.CO_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CO_process &rArr; CO_SDO_process &rArr; CO_SDO_abort &rArr; CO_CANsend &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_process
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_process
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_NMT_blinkingProcess50ms
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_process
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_EM_process
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>CO_process_SYNC_RPDO</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, canopen.o(i.CO_process_SYNC_RPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CO_process_SYNC_RPDO &rArr; CO_SYNC_process &rArr; CO_CANsend &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANclearPendingSyncPDOs
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_process
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_process
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmrTask_thread
</UL>

<P><STRONG><a name="[83]"></a>CO_process_TPDO</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, canopen.o(i.CO_process_TPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CO_process_TPDO &rArr; CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOisCOS
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_process
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmrTask_thread
</UL>

<P><STRONG><a name="[60]"></a>CO_setUint32</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, co_sdo.o(i.CO_setUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_setUint32
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_1200
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_1014
</UL>

<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[86]"></a>HAL_ADC_Init</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[87]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, stm32f0xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[4e]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 388 bytes, Stack size 12 bytes, stm32f0xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_init
</UL>

<P><STRONG><a name="[4a]"></a>HAL_CAN_DeInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f0xx_hal_can.o(i.HAL_CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_CAN_DeInit &rArr; HAL_CAN_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_disable
</UL>

<P><STRONG><a name="[43]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_CAN_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>HAL_CAN_Init</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, stm32f0xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANmodule_init
</UL>

<P><STRONG><a name="[8b]"></a>HAL_CAN_MspDeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_CAN_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_CAN_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_DeInit
</UL>

<P><STRONG><a name="[8c]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, stm32f0xx_hal_msp.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[89]"></a>HAL_DMA_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[40]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start_DMA
</UL>

<P><STRONG><a name="[8d]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 236 bytes, Stack size 20 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspDeInit
</UL>

<P><STRONG><a name="[88]"></a>HAL_GPIO_Init</STRONG> (Thumb, 460 bytes, Stack size 20 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[ad]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[3e]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[b1]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[92]"></a>HAL_InitTick</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[8e]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspDeInit
</UL>

<P><STRONG><a name="[90]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[8f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[96]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[97]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[93]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[98]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[99]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1532 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[94]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b0]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[af]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[9a]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[9b]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f0xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[9d]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardFault_Handler &rArr; ShowError &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>ShowError</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main.o(i.ShowError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ShowError &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>SystemClock_Config</STRONG> (Thumb, 120 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TIM1_CC_IRQHandler &rArr; tmrTask_thread &rArr; CO_process_TPDO &rArr; CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmrTask_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042x6.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[9e]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[a4]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[b4]"></a>WriteNumbertoLeds</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, main.o(i.WriteNumbertoLeds))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>_Error_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i._Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[7b]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_hal_dma.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowError
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOisCOS
</UL>

<P><STRONG><a name="[c5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[73]"></a>crc16_ccitt</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, crc16-ccitt.o(i.crc16_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_process
</UL>

<P><STRONG><a name="[21]"></a>main</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = main &rArr; CO_init &rArr; CO_TPDO_init &rArr; CO_TPDOconfigMap &rArr; CO_PDOfindMap &rArr; CO_OD_find
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_delete
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SYNC_initCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsetNormalMode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start_DMA
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNumbertoLeds
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b3]"></a>tmrTask_thread</STRONG> (Thumb, 428 bytes, Stack size 8 bytes, main.o(i.tmrTask_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tmrTask_thread &rArr; CO_process_TPDO &rArr; CO_TPDO_process &rArr; CO_TPDOsend &rArr; CO_CANsend &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_TPDO
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_process_SYNC_RPDO
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[84]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[91]"></a>DMA_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f0xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[a0]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[a3]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[a5]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[a6]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[9f]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[a1]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[95]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[aa]"></a>MX_ADC_Init</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, main.o(i.MX_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_ADC_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CalcBaseAndBitshift &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>MX_DMA_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>MX_GPIO_Init</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>MX_TIM1_Init</STRONG> (Thumb, 218 bytes, Stack size 88 bytes, main.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>CO_CANsendToModule</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, co_driver.o(i.CO_CANsendToModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CO_CANsendToModule &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANinterrupt
</UL>

<P><STRONG><a name="[45]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, co_driver.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANclearPendingSyncPDOs
</UL>

<P><STRONG><a name="[24]"></a>CO_ODF_1003</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, co_emergency.o(i.CO_ODF_1003))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_ODF_1003
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_emergency.o(i.CO_EM_init)
</UL>
<P><STRONG><a name="[25]"></a>CO_ODF_1014</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, co_emergency.o(i.CO_ODF_1014))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CO_ODF_1014 &rArr; CO_getUint32
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_emergency.o(i.CO_EM_init)
</UL>
<P><STRONG><a name="[58]"></a>CO_HBcons_monitoredNodeConfig</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, co_hbconsumer.o(i.CO_HBcons_monitoredNodeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CO_HBcons_monitoredNodeConfig &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBconsumer_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_1016
</UL>

<P><STRONG><a name="[26]"></a>CO_HBcons_receive</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, co_hbconsumer.o(i.CO_HBcons_receive))
<BR>[Address Reference Count : 1]<UL><LI> co_hbconsumer.o(i.CO_HBcons_monitoredNodeConfig)
</UL>
<P><STRONG><a name="[27]"></a>CO_ODF_1016</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, co_hbconsumer.o(i.CO_ODF_1016))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CO_ODF_1016 &rArr; CO_HBcons_monitoredNodeConfig &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_HBcons_monitoredNodeConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_hbconsumer.o(i.CO_HBconsumer_init)
</UL>
<P><STRONG><a name="[28]"></a>CO_NMT_receive</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, co_nmt_heartbeat.o(i.CO_NMT_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CO_NMT_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_nmt_heartbeat.o(i.CO_NMT_init)
</UL>
<P><STRONG><a name="[2a]"></a>CO_ODF_RPDOcom</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, co_pdo.o(i.CO_ODF_RPDOcom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CO_ODF_RPDOcom &rArr; CO_RPDOconfigCom &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDOconfigCom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(i.CO_RPDO_init)
</UL>
<P><STRONG><a name="[2b]"></a>CO_ODF_RPDOmap</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, co_pdo.o(i.CO_ODF_RPDOmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = CO_ODF_RPDOmap &rArr; CO_RPDOconfigMap &rArr; CO_PDOfindMap &rArr; CO_OD_find
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDOconfigMap
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_PDOfindMap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(i.CO_RPDO_init)
</UL>
<P><STRONG><a name="[32]"></a>CO_ODF_TPDOcom</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, co_pdo.o(i.CO_ODF_TPDOcom))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CO_ODF_TPDOcom &rArr; CO_TPDOconfigCom &rArr; CO_CANtxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOconfigCom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(i.CO_TPDO_init)
</UL>
<P><STRONG><a name="[33]"></a>CO_ODF_TPDOmap</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, co_pdo.o(i.CO_ODF_TPDOmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = CO_ODF_TPDOmap &rArr; CO_TPDOconfigMap &rArr; CO_PDOfindMap &rArr; CO_OD_find
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOconfigMap
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_PDOfindMap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(i.CO_TPDO_init)
</UL>
<P><STRONG><a name="[2c]"></a>CO_PDO_receive</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, co_pdo.o(i.CO_PDO_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CO_PDO_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_pdo.o(i.CO_RPDOconfigCom)
</UL>
<P><STRONG><a name="[63]"></a>CO_PDOfindMap</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, co_pdo.o(i.CO_PDOfindMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CO_PDOfindMap &rArr; CO_OD_find
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_getLength
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_getDataPointer
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_getAttribute
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_OD_find
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDOconfigMap
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDOconfigMap
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_TPDOmap
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_RPDOmap
</UL>

<P><STRONG><a name="[61]"></a>CO_RPDOconfigCom</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, co_pdo.o(i.CO_RPDOconfigCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CO_RPDOconfigCom &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_RPDOcom
</UL>

<P><STRONG><a name="[62]"></a>CO_RPDOconfigMap</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, co_pdo.o(i.CO_RPDOconfigMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CO_RPDOconfigMap &rArr; CO_PDOfindMap &rArr; CO_OD_find
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_errorReport
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_PDOfindMap
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_RPDO_init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_RPDOmap
</UL>

<P><STRONG><a name="[64]"></a>CO_TPDOconfigCom</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, co_pdo.o(i.CO_TPDOconfigCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CO_TPDOconfigCom &rArr; CO_CANtxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_TPDOcom
</UL>

<P><STRONG><a name="[65]"></a>CO_TPDOconfigMap</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, co_pdo.o(i.CO_TPDOconfigMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CO_TPDOconfigMap &rArr; CO_PDOfindMap &rArr; CO_OD_find
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_errorReport
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_PDOfindMap
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_TPDO_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_ODF_TPDOmap
</UL>

<P><STRONG><a name="[2d]"></a>CO_ODF_1200</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, co_sdo.o(i.CO_ODF_1200))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CO_ODF_1200 &rArr; CO_getUint32
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_setUint32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sdo.o(i.CO_SDO_init)
</UL>
<P><STRONG><a name="[6b]"></a>CO_SDO_abort</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, co_sdo.o(i.CO_SDO_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CO_SDO_abort &rArr; CO_CANsend &rArr; CO_errorReport &rArr; CO_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANsend
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_memcpySwap4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_SDO_process
</UL>

<P><STRONG><a name="[2e]"></a>CO_SDO_receive</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, co_sdo.o(i.CO_SDO_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_SDO_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sdo.o(i.CO_SDO_init)
</UL>
<P><STRONG><a name="[2f]"></a>CO_ODF_1005</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, co_sync.o(i.CO_ODF_1005))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CO_ODF_1005 &rArr; CO_CANrxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANrxBufferInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sync.o(i.CO_SYNC_init)
</UL>
<P><STRONG><a name="[30]"></a>CO_ODF_1006</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, co_sync.o(i.CO_ODF_1006))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CO_ODF_1006 &rArr; CO_getUint32
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_getUint32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sync.o(i.CO_SYNC_init)
</UL>
<P><STRONG><a name="[31]"></a>CO_ODF_1019</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, co_sync.o(i.CO_ODF_1019))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CO_ODF_1019 &rArr; CO_CANtxBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CO_CANtxBufferInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> co_sync.o(i.CO_SYNC_init)
</UL>
<P><STRONG><a name="[29]"></a>CO_SYNC_receive</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, co_sync.o(i.CO_SYNC_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CO_SYNC_receive
</UL>
<BR>[Address Reference Count : 2]<UL><LI> co_sync.o(i.CO_ODF_1005)
<LI> co_sync.o(i.CO_SYNC_init)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
